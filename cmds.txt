samtools view -F 2308 NA12878-DirectRNA.pass.dedup.NoU.fastq.hg38.minimap2.sorted.bam | cut -f1,2,3,4,6 | perl LongReadRNA/scripts/isoforms/extract_isoforms.pl | bgzip > NA12878-DirectRNA.raw_isoforms.tsv.bgz

#new version with strand
samtools view -F 2308 NA12878-DirectRNA.pass.dedup.NoU.fastq.hg38.minimap2.sorted.bam | cut -f 2,3,4,6 | perl -ne 'BEGIN { $b=0; } chomp; ($flag,$c,$s,$f)=split(/\t/,$_); my $o = (int($flag) & 0x10)?'-':'+'; $r=$s; while($f=~/(\d+)([NMD=X])/cg) { $i=$1; $t=$2; if($t eq "N") { print "$c\t$r\t".($r+$i-1)."\t$b\t$o\n"; } $r+=$i; } $b++;' | sort -k1,1 -k2,2n -k3,3n -k4,4 | perl -ne 'chomp; $f=$_; ($c,$s,$e,$o,$sid)=split(/\t/,$f); if($pc && $pc eq $c && $ps == $s && $pe == $e && $po == $o) { $sids.=",$sid"; $nsids++; next; } elsif($pc) { print "$pc\t$ps\t$pe\t$po\t$nsids\t$sids\n"; } $nsids=1; $pc=$c; $ps=$s; $pe=$e; $po=$o; $sids=$sid; END { if($pc) { print "$pc\t$ps\t$pe\t$po\t$nsids\t$sids\n"; } }' > NA12878.bam.perl.introns.merged.sorted2

#compare jxs with GTEx
zcat /data/snaptron_data/gtex/junctions.bgz | cut -f2,3,4 | sort -u > gtex_junctions.tsv

grep "NA12878" ./srav2_samples.tsv > ./srav2_samples.tsv.NA12878
cut -f 2,78,79,85,90- srav2_samples.tsv.NA12878
grep "SRR1153470" ./srav2_samples.tsv.NA12878 > ./srav2_samples.tsv.NA12878.SRR1153470
time zcat snaptron_data/srav2/junctions.bgz | LongReadRNA/scripts/filter_snaptron_by_sample.sh 27565 1 | bgzip > srav2.27565.SRR1153470.junctions.tsv.bgz

real    38m47.258s
user    46m17.821s
sys     1m17.291s


zcat ncbirefseq_ucsc_hg38.gtf.gz | cut -f 1,3,4,5,7,9 | egrep -e ' exon    ' | cut -f 1,3- | sort -t'      ' -k1,1 -k2,2n -k3,3n > ncbirefseq_ucsc_hg38.gtf.gz.sorted

cat ncbirefseq_ucsc_hg38.gtf.gz.sorted.no_alts_randoms | perl -ne 'chomp; ($c,$s,$e,$st,$info)=split(/\t/,$_); $info=~/transcript_id "([^"]+)";/; $t=$1; $h{$t}->{c}=$c; push(@{$h{$t}->{a}},[$c,$s-1,$e+1]); END { for $t (keys %h) { $pe=undef; for $a (@{$h{$t}->{a}}) { if($pe && $pc eq $a->[0] && $pe <= $a->[1]) { print "$t\t".$a->[0]."\t$pe\t".$a->[1]."\n"; } $pc=$a->[0]; $pe=$a->[2];}}}' | sort -u -k1,1 -k2,2n -k3,3n > ncbirefseq_ucsc_hg38.gtf.gz.sorted.juncs2

#counts the number of transcripts each junction appears in as well (puts it # of reads field)
cat ncbirefseq_ucsc_hg38.gtf.gz.sorted.no_alts_randoms | perl -ne 'chomp; ($c,$s,$e,$st,$info)=split(/\t/,$_); $info=~/transcript_id "([^"]+)";/; $t=$1; $h{$t}->{c}=$c; push(@{$h{$t}->{a}},[$c,$s-1,$e+1,$st]); END { for $t (keys %h) { $pe=undef; for $a (@{$h{$t}->{a}}) { if($pe && $pc eq $a->[0] && $pe <= $a->[1]) { print "".$a->[0]."\t$pe\t".$a->[1]."\t".$a->[3]."\t1\t1\t1\t1\t1\n"; } $pc=$a->[0]; $pe=$a->[2];}}}' | sort -k1,1 -k2,2n -k3,3n -k4,4 | uniq -c | perl -ne 'chomp; $f=$_; @f=split(/\s+/,$f); $j=shift(@f); $nt=shift(@f); pop(@f); print "".join("\t",@f)."\t$nt\n";' > ncbirefseq_ucsc_hg38.gtf.gz.sorted.juncs

#check CIGAR parsing
echo "11M3M18M" | perl -ne 'chomp; $s=$_; $s=~s/\d+[^NMD\=X\d]//g; print "$s\n"; $sum=0; map {$sum+=$_;} (split(/[NMD\=X]/,$s)); print "$sum\n";'


/data/cufflinks/cuffcompare -r <(zcat ncbirefseq_ucsc_hg38.gtf.gz) ../h1k


zcat ../NA12878-DirectRNA.raw.cuff.gtf.bgz > NA12878-DirectRNA.raw.cuff.gtf &
time /data/cufflinks/cuffcompare -r ncbirefseq_ucsc_hg38.gtf NA12878-DirectRNA.raw.cuff.gtf -o NA12878-DirectRNA.raw.cuff.gtf.compare

#add strand info from original LRs to wiggle base files
cat ../source_files/NA12878.bam.juncs | perl -ne 'BEGIN { open(IN,"<wiggle.lr.refseq.intersect.single"); %h; while($line=<IN>) { chomp($line); ($c1,$s1,$e1,$nr1,$c2,$s2,$e2,$n,$nr2)=split(/\t/,$line); $h{join("\t",($c1,$s1,$e1))}=[$nr1,$c2,$s2,$e2,$nr2]; } close(IN); } chomp; $f=$_; ($c,$s,$e,$o)=split(/\t/,$f); $k=join("\t",($c,$s,$e)); $a=$h{$k}; if($a) { print "$k\t$o\t".join("\t",@$a)."\n";}' > wiggle.lr.refseq.intersect.single.strand

#add annotation/strand info from targets to wiggle base files (run *after* the above)
cat gtex_junctions.tsv | perl -ne 'BEGIN { open(IN,"<wiggle.lr.gtex.intersect.single.strand"); %h; while($line=<IN>) { chomp($line); ($c1,$s1,$e1,$o1,$nr1,$c2,$s2,$e2,$nr2)=split(/\t/,$line); push(@{$h{join("\t",($c2,$s2,$e2))}},[$c1,$s1,$e1,$o1,$nr1,$nr2]); } close(IN); } chomp; $f=$_; ($c,$s,$e,$o,$a1,$a2,$a3,$ns,$nr)=split(/\t/,$f); $k=join("\t",($c,$s,$e)); $a_=$h{$k}; if($a_) { for $a (@$a_) { @a=@$a; $nr2=pop(@a); print "".join("\t",@a)."\t$c\t$s\t$e\t$o\t$a1\t$a2\t$a3\t$nr2\n";}}' > wiggle.lr.gtex.intersect.single.strand.annots


#check strand agreement in wiggle base files
cat wiggle.lr.short.intersect.single.strand.annots | perl -ne 'chomp; $f=$_; @f=split(/\t/,$f); if($f[3] ne $f[8]) { print "$f\n"; }' | wc -l


#create full matrix of junctions with 4 comparison target sets
cat original_plus_4_wiggle.juncs.sorted | perl -ne 'BEGIN { $fa="_full"; $pa1="_1_ss"; $pa2="_2_ss"; print "chr\tstart\tend\tlr_strand\tlr_nr\tshort_strand\tshort$fa\tshort$pa1\tshort$pa2\tshort_nr\trefseq_strand\trefseq$fa\trefseq$pa1\trefseq$pa2\trefseq_nr\tgtex_strand\tgtex$fa\tgtex$pa1\tgtex$pa2\tgtex_nr\tsra_strand\tsra$fa\tsra$pa1\tsra$pa2\tsra_nr\n"; } chomp; $f=$_; $f=~tr/\+\-/10/; @f=split(/\t/,$f); ($c,$s,$e,$o,$nr)=@f; if($pc && ($pc ne $c || $ps != $s || $pe != $e)) { print "$pc\t$ps\t$pe\t$po\t$pnr"; for $t ("h","r","g","s") { if(!$h{$t}) { print "\t$po\t0\t0\t0\t0"; } else { print "\t".join("\t", @{$h{$t}}); } } print "\n";  %h=(); } $pc=$c; $ps=$s; $pe=$e; $po=$o; $pnr=$nr; if($f[5] ne "a") { local @k=splice(@f,8,5); $h{$f[8]}=\@k; } END { if($pc) { print "$pc\t$ps\t$pe\t$po\t$pnr"; for $t ("h","r","g","s") { if(!$h{$t}) { print "\t$po\t0\t0\t0\t0"; } else { print "\t".join("\t", @{$h{$t}}); } } print "\n"; }} ' > original_plus_4_wiggle.juncs.sorted.full
